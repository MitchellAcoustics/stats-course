{
  "hash": "dd619058eeb189d8328d9dfeedebf19d",
  "result": {
    "markdown": "---\ntitle: \"Lab 4: Elections\"\nformat:\n  revealjs:\n    author: \"STAT 20: Introduction to Probability and Statistics\"\n    height: 900\n    width: 1600\n    theme: ../../../assets/slides.scss\n    multiplex: false\n    transition: fade\n    slide-number: c\n    incremental: false\n    center: false\n    menu: false\n    highlight-style: github\n    progress: false\n    code-overflow: wrap\n    title-slide-attributes:\n      data-background-image: ../../../assets/stat20-hex-bg.png\n      data-background-size: contain\n---\n\n\n# Benford's Law\n\n## \n\n:::poll\nWhat is the distribution of city/town populations in all cities and towns in California?\n:::\n\n. . .\n\n##\n\n:::poll\nWhat is the distribution of the **first digit** of city/town populations in all cities and towns in California?\n:::\n\n\n:::notes\n\n(these extensive notes were the instructions to TAs when facilitating this spring 2022)\n\nThis first component can be done either during Berkeley time or at the start of class along with students. It depends on how long you expect the rest of the lesson to take and what you'd like to emphasize:\n[Write on the board the two \"fundamental\" distributions that we've covered so far: the Binomial and the Bernoulli. https://www.stat20.org/lectures/14/binomial.html#/bernoulli-distributionl will give you a sense of the notation and layout that's used. Best to replicate each element of these slides, including the plots.] \n\nIt's reasonable to ask students to close their laptops for the first part of class.\n\nAsk students for a guess or two at the population of Berkeley.  Write on board then go to Wikipedia and get the true answer and correct the one(s) on the board. From there, follows links through Wikipedia to other towns and cities in California, building up a list of 10 city names and their populations (randomly picking a few of these links is a good method: https://en.wikipedia.org/wiki/Category:Incorporated_cities_and_towns_in_California). Structure this on the board as a data frame with two columns: city and population, and 10 rows.\n\nAsk students to sketch the distribution of two variables:\n1. What they expect the population variable to look like were they to collect the population of all the cities and towns in California.\n2. The distribution of the value of the first digit in the population counts of all of these town.\nThis is probably best done think-pair share: give a couple minutes to for them to sketch silently, then ask them to share with a neighbor, then ask a pair to describe their distributions as you draw it on the board.\n\nProbing questions:\n1. Where does this variable sit in the Data Taxonomy?\n2. What is the range of possible values this variable can take?\n3. What geometry will you use?\n4. What shape/modality/center/spread would you expect to see?\n5. What labels belong on the axes?\n6. What is a good title for this plot?\n\nThe first should be a histogram or density plot (boxplot is meh) that is heavily right skewed. The second should be a barchart on the integers 1-9, each one having decreasing probabilities.\n\nWrite out Benford's Law in a similar way to the other named distributions and describe it as a distribution that we're going to try to use to describe vote counts. Start the calculation of E and V of Benford's Law just so that students can see what goes into each term of those sums (I'm actually not sure what the base_10 Benfords E and V are).\n\n:::\n\n## Benford's Law\n\n**Observation**: many naturally occurring numerical variables have a recurring pattern in the distribution of the first digit.\n\n. . .\n\nBenford's law states that\n\n. . .\n\n- The first digit of the measurement of a naturally occurring phenomenon takes a **decreasing** log distribution.\n\n. . .\n\n- Thus the numbers 1-9 are not distributed uniformly. Instead, 1 has the highest proportion and 9 has the lowest proportion. \n\n. . .\n\n- For example, first digits of stock prices, populations of cities, and election results are observed to follow the Benford's Law.\n\n\n## Benford's Law\n\nLet $X$ be the first digit of a randomly selected number. $X \\sim Benfords()$ if\n\n$$P(X = x) = \\log_{10}\\left(1 + 1/x \\right)$$\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-1-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n# 2009 Iran Election\n\n## 2009 Iran Election\n\n. . .\n\n::::columns\n\n:::{.column width=\"50%\"}\n#### Background\n\n- Ongoing public sentiment that previous election was fraudulent\n- The highest voter turnout in Iran's history\n\n:::{.fragment}\n#### Leading candidates\n\n- Mahmoud Ahmadinejad: Leader of conservatives and incumbent president.\n- Mir-Hossein Mousavi: Reformist and former prime minister. Seeking rapid political evolution.\n:::\n:::\n\n:::{.column width=\"50%\" .fragment}\n\n\n![](images/iran-pols.png){width=\"500\" fig-align=\"center\"}\n\n:::{.fragment}\n#### Outcome\n\nAhmadinejad won the election with 62.6% of the votes cast, while Mousavi received 33.75% of the votes cast.\n:::\n:::\n::::\n\n\n## Post-election controversies and unrest\n\n::::columns\n:::{.column width=\"50%}\n\n![](images/iran_green3.jpg)\n\n:::\n\n:::{.column width=\"50%\"}\n- Allegations of fraud\n- Public protests and unrests\n- The green wave movement, led by Mousavi, against the allegedly fraudulent election and Ahmadinejad's regime\n:::\n::::\n\n##\n\n:::{.bigadage}\nWas the election fraudulent?\n:::\n\n# Benfords Law and Elections\n\n## Fraud detection using Benford's Law\n\n#### Common Theory\n\nIn a normally occurring, fair, election, the first digit of the vote counts county-by-county should follow Benford's Law. If they do not, that might suggest that vote counts have been manually altered.\n\n. . .\n\n\\\n\\\n\\\n\nThis theory brought to bear to determine whether the 2009 presidential election in Iran showed irregularities[^iran].\n\n[^iran]: <https://physicsworld.com/a/benfords-law-and-the-iranian-e/>\n\n\n# R\n\n## `get_first()`\n\n## `slice_sample()`\n\n## `pull()`\n\n# US Elections Data\n\n## GitHub \n\nStatisticians, scientists, and engineers work on projects that include code, data, figures, and texts. For large-scale or long-run projects, we need a system to track and share everything.\n\n. . .\n\n#### What is Github\n\n- A repository is like an online folder containing code, data, figures, presentations, papers, etc.\n- A public repository allow everyone to access and download its content.\n\n. . .\n\n#### Examples\n\n- The `stat20data` package has its code and data stored on GitHub [here](https://github.com/stat20/stat20data)\n- The OpenElections project\n\n\n## The OpenElections Project\n\n::::{.columns}\n:::{.column width=\"50%\"}\n![](images/OpenElections.png)\n:::\n\n:::{.column width=\"50%\"}\n\n- Tracks official election results in every state of the US.\n- Shares the data via GitHub.\n- Can download data as CSV files.\n\n:::\n::::\n\n## Access OpenElections data\n\nData from GitHub or other websites can be loaded into R like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_frame <- read_csv(\"web link to raw data\")\n```\n:::\n\n\n\n. . .\n\nSo where to find the link to the raw data? \n\n\n:::notes\n- Open the OpenElections GitHub\n- Repositories on the first page could be overwhelming for first-time git users. You may point out they are not different from folders in our laptops but allow people to make updates remotely.\n- Under the Repositories session, open one of the folders named openelections-data-state.\n- Go to the 2020 folder. Some states may include several election results (Texas includes both general and primary elections). Find and open a csv file with \"general_precinct\". Click the button that says “Raw” at the top right of the data frame on GitHub or click the link that says “View Raw Data”.\n- This may be the first time for some students to see a raw csv file. You may point out that each pair of commas creates a cell, and each header corresponds to one comma-separated field although they might not appear aligned on the raw data.\n- Copy the url of the raw data page. In RStudio, demonstrate using read_csv() to load the data frame and save it to an object. \n- Visually inspect the data frame and go over the data taxonomy (unit of observation, dimension, type of variable, etc.). It may be worth showing data from two different states, which might use different fields and formats. For instance, North Carolina includes the names of both the candidate and the running mate under the candidate field. Student will adjust their code based on each state's data set.\n:::\n\n##\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_72ddb372\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">25</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n",
    "supporting": [
      "slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}