{
  "hash": "7cf94efa7b219bf54cf5511feef2dcb6",
  "result": {
    "markdown": "---\ntitle: \"Chance and the Box Model\"\nsubtitle: \"Ideas of chance via a simple mechanism called a box model.\"\ndate: \"10/21/2022\"\nformat:\n  html:\n    toc-depth: 4\n    code-fold: true\n    code-link: true\n    code-summary: \".\"\nexecute: \n  warning: false\n  message: false\n---\n\n\n[[Discuss]{.btn .btn-primary}](https://app.perusall.com) [[Reading Questions]{.btn .btn-primary}](https://www.gradescope.com/courses/416233)\n[[PDF]{.btn .btn-primary}](notes.pdf)\n\n\\\n\n\n::: {.cell}\n\n:::\n\n\n[I]{.dropcap}n the last set of notes, we revisited the data cycle, and saw that, in order to use the obtained data to answer a question about our\n*target population*, we have to make sure that our data is\nrepresentative of the population. Most people have  some\nunderstanding of what it means for a sample to be representative. In\nthe picture below, which sample would you say better represents the\npopulation in the box?\n\n![](images/two-samples.jpeg){fig-align=center width=\"400\"}\n\nThe mechanisms and methods we use for obtaining\ndata are crucial in determining whether the data will be\nuseful in answering our question about the target population. They are\nthe *protocols* for our experimental design, or measurements,\nor survey design and sampling. For example, if the data are from a\nclinical trial for a new Covid-19 treatment, the design of the trial\nwill decide who gets the treatment, and who doesn't. Or perhaps we\nwant to poll voters to see if there is support for decriminalizing\nmarijuana possession federally (President Biden took a first step\ntowards this goal by pardoning all Americans  convicted of simple\nmarijuana possession under federal law).\n\nWho is selected for such an opinion poll can make a big difference in the estimate of the proportion of voters who support decriminalization of marijuana. You may have observed that some polling companies are more successful than others in their estimates and predictions, and consequently they are taken more seriously. Below is a snapshot of rankings of polling organizations from the well-known website FiveThirtyEight[^538]. According to the website, the rankings are based on the polling organization's ``historical accuracy and methodology''\n\n[^538]: This website was begun as poll aggregation site, by the statistician Nate Silver.]\n\n![](images/538-pollster-ranking-snippet.png){fig-align=center width=\"500\"}\n\nWe introduced the variation in data that is induced by using *chance* to collect the data - the variation could be caused by the sampling method, or the way units are assigned to groups, or from measurement error. In order to understand variation, we have to understand the chance mechanism which was used to collect the data. \nIn these notes, we are going to describe methods by which we can\nobtain representative samples from the target population - or rather,\nfrom our access frame. In practice, it is rare for the access frame\nand target population to exactly coincide. We need to design our\ndata collection methods (our protocols) so that our target population and our access frame overlap as much as we can manage. \n\n## The Box Model\n\nOne of the simplest ways of understanding chance, and later variation, is through the \n*box model*[^fppbox]. A box model consists of a box with numbered tickets, from which tickets are drawn.\nTo specify a box model, we have to say what tickets go in the box (that is, what are the numbers on the tickets, and how many of each) , and\nwhether the tickets will be drawn *with or without replacement* (after drawing a ticket from the box, do we put it back in the box or not, before we draw another ticket).\n\n### A box of tickets\n\n![](images/box-1.jpeg){fig-align=center width=\"400\"}\n\nConsider the box above which has five almost identical tickets. The only difference is the value written on them. Imagine that we shake the box to mix the tickets up, and then draw one ticket without looking. This is to ensure that all the tickets are *equally likely* to be drawn[^uar]. \nFor example, the chance of drawing a ticket labeled \"4\" is one in five, as there are five tickets to choose from and only one is labeled \"4\" etc.\n\nHere is a bar chart that shows how the box values are distributed, and you see that there are twice as many tickets marked 2. The frequency of each type of tickets in the box is called the *population distribution*.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbox <- c(1, 2, 2, 3, 4)\n\ndata.frame(box) %>% \n  ggplot(aes(x=box)) +\n  geom_bar(width = 0.98, fill = \"gray55\") +\n  xlab(\"ticket value\")\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=288}\n:::\n:::\n\n\n\nLet's make a table of all the tickets and their chances. This is called a *probability distribution table*. \n\n<center>\n<div style=\"width:300px\">\n\n|    Ticket | Chance of being drawn |\n|:---------:|:---------------------:|\n| $\\fbox{1}$| $\\displaystyle \\frac{1}{5}$ |\n| $\\fbox{2}$| $\\displaystyle \\frac{2}{5}$ |\n| $\\fbox{3}$| $\\displaystyle \\frac{1}{5}$ |\n| $\\fbox{4}$| $\\displaystyle \\frac{1}{5}$ |\n\n</div>\n</center>\n\nWe could plot the chances using `geom_col()`:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntkt_value <- unique(box)\ntkt_prob <- c(1/5, 2/5, 1/5, 1/5)\n\ndata.frame(cbind(tkt_value, tkt_prob)) %>%\n  ggplot(aes(x=tkt_value, y=tkt_prob)) + \n  geom_col(width = 0.98, fill = \"grey 55\") + \n  xlab(\"ticket value\") +\n  ylab(\"chance of being drawn\")\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=288}\n:::\n:::\n\nThe two figures look the same!! In fact, in the first figure, if we looked at proportion instead of count, the figures would be identical! \n\n<iframe src=\"https://giphy.com/embed/7GcdjWkek7Apq\" width=\"300\" height=\"170\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/highquality-incredibles-coincidence-7GcdjWkek7Apq\">via giphy</a></p>\n\nThis makes sense because the tickets are equally likely to be drawn, so their distribution in the box (the first figure) completely determines their chance of being drawn (the second figure).\n\nSince the tickets are drawn according to their chance, we could compute what a draw would be, on average, by computing a weighted (by their chance) average of the possible values. We would get, for a single draw: $1\\times \\frac{1}{5} + 2 \\times \\frac{2}{5} + 3 \\times \\frac{1}{5} + 4 \\times \\frac{1}{5} = 2.4$. Note that this exactly matches the average of the tickets in the box.\n\nHow about if we draw 30 times at random with replacement from this box and see what our sample looks like (we will explore the code later in the notes). That is, we will see what proportion of the draws are 1's, 2's etc.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(12345)\nsample_size <- 30\nsample_box <- sample(box, size = sample_size, replace = TRUE)\ndata.frame(sample_box) %>%\n  ggplot(aes(sample_box)) + \n  geom_bar(aes(y = ..prop..), width = 0.98, fill = \"grey55\") +\n  xlab(\"values of draws\") + \n  ylab(\"proportion of draws\")\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=288}\n:::\n:::\n\n\nWe can see that the *sample proportions* look similar to the *population (box) proportions*, but are somewhat different. It turns out that the counts of the drawn tickets are:\n\n<center>\n<div style=\"width:300px\">\n\n|    Ticket | Number of times drawn | Proportion of times drawn |\n|:---------:|:---------------------:|:---------------------:|\n| $\\fbox{1}$| 6 | 0.2 |\n| $\\fbox{2}$| 13 |0.4333333 |\n| $\\fbox{3}$| 8 | 0.2666667 |\n| $\\fbox{4}$|  3 | 0.1 |\n\n</div>\n</center>\n\nWhat we have seen here is how when we draw at random, we get a sample that resembles the population, that is, a *representative sample*.\n\n<!-- Should this be switched to an example where we're sampling *without* replacement? Both of the examples discussed in the intro are of this form. -->\n\n\\\n\n**The Box Model**\n\nThe purpose of creating a box model is to understand the variability in a *chance process* such as tossing a coin over and over and counting the number of heads, or sampling voters to ask them if they will vote for Prop 1 in November's elections. We do this by having the tickets represent the possible outcomes associated with the chance process, and using the variability in the tickets that are drawn to understand the variability of the chance process.\n\nIn order to create a box model that will model a chance process, we must specify:\n\n1. The box and tickets (what tickets go in the box, and the numbers written on them)\n2. The number of draws\n3. Whether or not we replace tickets between draws\n4. How we will summarize the values on the drawn tickets (we will sum the draws or compute their average)\n\nNote that these tickets should be identical in every way, except the value written on them, and  assume that the tickets in the box are *equally likely* to be drawn (we draw without looking into the box).\n\n\n### Setting up a box model: examples\nLet's practice creating boxes to model common scenarios.For each of the cases below, specify the four items above.\n\n#### Example 1: Tossing a fair coin and counting the number of heads\n\n![](images/us-quarter.png){width=\"100\"}\n\n**Tossing a fair coin once**\n\nWhat box and which tickets would you use to simulate one coin toss? \n\n<details><summary>Check your answer</summary>\nWe could draw one ticket from the box\n![](images/coin_ht.jpeg){fig-align=center width=\"100\"} but these are not numbered!\n\nOr we could draw one ticket from the box\n![](images/coin.jpeg){width=\"100\"}\nwith the ticket $\\fbox{1}$ representing the coin landing heads, and $\\fbox{0}$ representing the coin landing tails. This change of numbering the ticket representing the outcome we are counting with a 1 and all other tickets with a 0 is very important, since we are *classifying* the outcomes into two categories, and counting the instances of one of them (in this case, the coin landing heads).\n</details>\n\n<!-- Why is it very important? If we're simulating a coin toss, aren't the outcomes H and T? -->\n\n:::{.callout-warning icon=false}\n\n## Ask yourself\nWhat box would we use if the coin is not a fair coin, but lands heads $5$ out of $6$   times?\n\n:::\n\n**Tossing a fair coin twice**\n\n<details><summary>Check your answer</summary>\nWe could use the same box as above:\n\n![](images/coin.jpeg){width=\"100\"}\n\nRemember that the ticket $\\fbox{1}$ represents the outcome of a toss landing heads and  $\\fbox{0}$ represents a toss landing tails (because we are counting the number of heads). We let the box be as above, and draw two tickets at random *with replacement* from this box. To count the number of heads in two tosses, we add the draws.\n</details>\n\n**Tossing an unfair coin**\n\nSet up the box model for tossing a coin which has chance of 5/6 landing heads, and counting the number of heads.\n\n<details><summary>Check your answer</summary>\n\nWe do the same trick, of representing the outcome of heads with $\\fbox{1}$, and tails with $\\fbox{0}$. Since the coin lands heads 5 times out of 6, the box is given by:\n\n![](images/unfair-coin.jpeg){fig-align=center width=\"500\"}\n\nWe draw as many times as the number of tosses, and sum up the values on the tickets drawn.\n</details>\n\n\n#### Example 2: Rolling a fair die and summing the spots\n![](images/dice.png){width=\"100\"}[^unsplash]\n\n**Rolling a fair die once** \n\n<details><summary>Check your answer</summary>\nThe box will have six tickets as shown below, and we would draw one ticket from this box. The chance of any one of the tickets is $1/6$.\n\n![](images/die.jpeg){width=\"200\"}\n</details>\n\n**Rolling a fair die twice**\n\n<details><summary>Check your answer</summary>\nWe would use the same box as in the previous example, draw *twice* at random with replacement from this box, then add the draws.\n\n![](images/two-dice.jpeg){width=\"450\"}\n\n</details>\n\n\n#### Example 3: Betting on red in roulette \n\n![](images/roulette-us.jpg){fig-align=\"center\" width=\"200\"}[^unsplash]\n\nAn American roulette wheel has 38 pockets, of which 18 are red, 18 black, and 2 are green. The wheel is spun, and a small ball is thrown on the wheel so that it is equally likely to land in any of the 38 pockets. Players bet on which colored or numbered pocket the ball will come to rest in. If you bet one dollar that the ball will land on red, and it does, you get your dollar back, and you win one more dollar, so your *net gain* is \\$1. If it doesn't, and lands on a black or green number, you lose your dollar, and your *net \"gain\"* is -\\$1. What would be the box model for your net gain from a single spin? \n\n**Net gain from a single spin**\n\n<details><summary>Check your answer</summary>\nWe would use the box shown below marked \"Gain\". In the top box, there are 38 tickets, each representing a numbered pocket on the wheel. Draw one ticket to represent the ball landing in a particular pocket. In the second row each ticket represents a colored pocket, and we see that there are 18 red pockets, 18 black, and 2 green. We only care about the outcome *ball lands in red pocket*, and our gain from this. We would draw once from it, with the ticket marked $\\fbox{+1}$ representing our gain if the ball lands on a red pocket, and the ticket $\\fbox{-1}$ representing our loss if the ball doesn't land on red. We can see that the chance of drawing a  $\\fbox{+1}$ is 18 out of 38.\n\n![](images/roulette-bet.jpeg){fig-align=\"center\" width=\"300\"}\n\n</details>\n\n**Net gain from 10 spins**\n\nHow would we model our *net gain* or winnings from 10 spins (we bet \\$1 on each spin, and either lose it or get it back plus \\$1)?\n\n<details><summary>Check your answer</summary>\nUse the same box as above, with 18 tickets marked $\\fbox{+1}$ and 20 marked $\\fbox{-1}$, draw 10 times at random with replacement, and sum the draws.  \n</details>\n\n#### Example 4: Donkeys in Kenya\n![](images/kenyan-donkey.jpeg){fig-align=center width=\"200\"}[^donkey-pic]\n\nRecall the case study we saw about donkeys in Kenya. The question in the study was how to predict the weight of donkeys using measurements that were easier to obtain, and they obtained the data by measuring donkeys at 17 sites in 2010[^donkey].\n\nFour body measurements were made for each donkey: liveweight (kg), heart girth (cm), height (cm), and length (cm), and in addition, sex and body condition score were recorded (the bcs categorized the donkeys according to their condition, ranging from \"emaciated\" to \"obese\"). Suppose I want to sample 50 donkeys from this dataset, to compute their average weight and average girth (girth or heart girth  is the circumference of the body, measured just behind the front legs.)\n\nSet up the box model for this process (sampling donkeys).\n\n<details><summary>Check your answer</summary>\n\nThe box has 544 tickets, one for each donkey. The ticket has information from all 8 variables recorded (3 categorical and 5 numerical). We only need 2 variables, so the tickets will have those two variables recorded.\nWe draw 50 tickets from this box at random *without* replacement, and compute 2 averages from the draws.\n\n![](images/donkey-tkt.jpeg){fig-align=center width=\"300\"}\n\n\n</details>\n\n[^donkey]: K. Milner and J.C. Rougier, 2014. *How to weigh a donkey in the\nKenyan countryside*. Significance, 11(4), 40–43. 74, 115\n<https://rss.onlinelibrary.wiley.com/doi/full/10.1111/j.1740-9713.2014.00768.x>\n\n[^donkey-pic]: <https://people.maths.bris.ac.uk/~mazjcr/#donkeys>\n\n#### Example 5: Antarctic penguins\n\n![](images/penguins.png){fig-align=center width=\"300\"}\n\nYou have seen the penguins data, which measured 8 variables on a sample of 344. Here the box will contain 344 tickets, and we will draw 50 tickets at random without replacement. Note that each ticket in the box represents one penguin in the sample has information for multiple variables measured on that penguin, and we would consider only the information we are interested in. Suppose we wanted sex, species, and flipper length, to compare the flipper lengths of males and females, grouped by species.\nSet up the box model.\n\n<details><summary>Check your answer</summary>\n\nThe box would have 344 tickets, one for each penguin. Each ticket would have 3 things written on it: the species, sex, and flipper length in mm of the penguin.\nWe would draw 50 tickets at random without replacement, and \n![](images/penguin-ticket.jpeg){fig-align=center width=\"300\"}\n\n## Simulating the box model\n\n:::{.callout-tip}\n\n## Code along\n\nAs you read through these notes, keep RStudio open in another window to code along at the console.\n:::\n\nThe box model is easily simulated in R, since there is a convenient function that does exactly what we need: draw tickets from a \"box\" (a vector). We will use the function `sample(x, size = n, replace = FALSE)`, where `x` is the vector you want to sample from, `size` is the number of draws (with the default value being the length of `x`), and `replace` specifies whether the draws are with or without replacement. The default in `sample()` is to draw _without_ replacement. \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nset.seed(12345)\nbox <- c(1, 2, 2, 3, 4)\nsample(box,1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nWe can use `sample()` to *estimate* the chance of a particular outcome  when we aren't sure of what that chance might be. We would do this by repeatedly sampling from the \"box\" with replacement (many times), then computing the proportion of times we drew each ticket. For example, say we consider our first example (the simple box), and want to estimate the chance of each ticket.\n\nIn the code below, another new function is introduced: `replicate()`. The function `replicate(reps, expr)` is a very useful function that takes as input an expression `expr` and evaluates it `reps` times, returning a vector. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nbox <- c(1, 2, 2, 3, 4)\ndraws <- replicate(2000, sample(box, 1, replace = TRUE))\nggplot(as.data.frame(draws), aes(x=draws)) + \n  geom_bar(aes(y=..prop..), fill=\"gray50\")+ \n  ylab(\"proportion of draws\") + \n  xlab(\"ticket drawn\")\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=384}\n:::\n:::\n\n\nWe see that the *estimated* chance of drawing a $\\fbox{2}$ is about 0.4, and this is about twice the estimated chance of drawing any other ticket. Of course, we knew this already, without needing to code it in R. Let's think of a more complicated situation: \n\nWhat if we wanted to wanted to draw _five_ tickets with replacement from this box, and sum the draws? What would be the possible values that we would get? What could their chances be? We can visualize this in R:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nbox <- c(1, 2, 2, 3, 4)\ndraws <- replicate(5000, sum(sample(box, size = 5, replace = TRUE)))\nggplot(as.data.frame(draws), aes(x=draws)) + \n  geom_bar(aes(y=..prop..), fill=\"gray50\")+ \n  ylab(\"proportion\") + \n  xlab(\"sum of draws\") + \n  scale_x_continuous(breaks = seq(min(draws), max(draws), by = 1))\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=384}\n:::\n:::\n\n\nWe can see that there is a lot more variation in the values taken by the sum of 5 draws.\n\n\n#### Tossing a fair coin\n\nWe can estimate the chances of various outcomes related to coin tossing, using the box. \n\nSuppose, for example, that we would like to figure out the chance of exactly 2 heads if we toss a coin 4 times. Think about how you would use the functions `sample()` and `replicate()` to model this, using the 0-1 box we defined earlier, for tossing a coin.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoin <- c(0, 1) #1 represents the toss landing heads\ntwo_heads <-replicate(50000, sum(sample(coin, 4, replace = TRUE)) == 2)\ncat(\"The proportion of times we see 2 heads out of 4 tosses is\", mean(two_heads))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe proportion of times we see 2 heads out of 4 tosses is 0.37816\n```\n:::\n:::\n\n\n\n#### Rolling a pair of dice and summing the spots\n\nThis is something that we could use if we wanted to play Monopoly and couldn't find the dice. Recall the box we used to simulate a die roll. Now we are going to define a vector in R to represent a die, and sample twice with replacement, from this vector.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie <- 1:6\n# to simulate rolling a die twice and summing the spots\ndraws <- sample(die, size = 2, replace = TRUE)\nsum(draws)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n\nWe could also repeat it many times and estimate the chance of each of the possible outcomes.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmany_draws <- replicate(5000, sum(sample(die, size = 2, replace = TRUE)))\nggplot(as.data.frame(many_draws), aes(x=many_draws)) + \n  geom_bar(aes(y=..prop..), fill=\"gray50\")+ \n  ylab(\"proportion\") + \n  xlab(\"sum of two draws\") + \n  scale_x_continuous(breaks = seq(min(many_draws), \n                                  max(many_draws), by = 1))\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=384}\n:::\n:::\n\n\n\n:::{.callout-warning icon=false}\n\n## Ask yourself\n\nWe know all the possible outcomes of summing a pair of dice (between $2$ and $12$ spots). Why not make a box with tickets labeled $2, 3, 4, \\ldots, 12$ and draw *once* from that box? If we did indeed want a box from which we would only draw once, what would the box be? (Hint: How many possible outcomes would there be if you rolled a pair of dice. )\n:::\n\n\n#### Sampling donkeys\n\nIn the donkeys dataset, the box has 544 tickets, with each ticket representing one of the donkeys that was measured at the mobile de-worming sites. Each ticket contains the values of 8 variables, of which we are interested in 2. We set up the box model for drawing 50 tickets at random without replacement, and we wanted to compute the average girth and the average weight.\n\nWe will use `slice_sample`, which you have seen before, and compute the average girth and the average weight for the donkeys in this sample. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# read in the donkey data\ndonkeys <- read.csv('https://raw.githubusercontent.com/shomurali/course-materials/sho2/4-generalization/18-chance-intro/donkeys.csv')\n\n# take a quick look at the dataset\nglimpse(donkeys)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 544\nColumns: 8\n$ BCS       <dbl> 3.0, 2.5, 1.5, 3.0, 2.5, 1.5, 2.5, 2.0, 3.0, 3.0, 3.0, 3.0, …\n$ Age       <chr> \"<2\", \"<2\", \"<2\", \"<2\", \"<2\", \"<2\", \"<2\", \"<2\", \"<2\", \"<2\", …\n$ Sex       <chr> \"stallion\", \"stallion\", \"stallion\", \"female\", \"female\", \"fem…\n$ Length    <int> 78, 91, 74, 87, 79, 86, 83, 77, 46, 92, 86, 81, 84, 85, 87, …\n$ Girth     <int> 90, 97, 93, 109, 98, 102, 106, 95, 66, 110, 105, 106, 106, 1…\n$ Height    <int> 90, 94, 95, 96, 91, 98, 96, 89, 71, 99, 92, 92, 96, 96, 97, …\n$ Weight    <int> 77, 100, 74, 116, 91, 105, 108, 86, 27, 141, 100, 95, 115, 1…\n$ WeightAlt <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# draw a sample of 50 donkeys and compute their mean girth and weight\ndonkeys %>%\n  select(Girth, Weight) %>% #changing tickets to include variables of interest\n  slice_sample(n = 50) %>% #drawing 50 times without replacement\n  summarise(average_girth_cm = mean(Girth), average_weight_kg = mean(Weight))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  average_girth_cm average_weight_kg\n1           115.94            151.86\n```\n:::\n:::\n\n\n\n\n\n#### Sampling penguins\n\nRecall that in the penguins example, when the box has 344 tickets, with each ticket representing one of the observations that we have access to from the Palmer penguins data, each ticket contains the values of multiple variables. We set up the box model for sampling 50 penguins without replacement, and we wanted to compare flipper lengths.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# one sample\ndrop_na(penguins,sex) %>%\n  select(species, sex, flipper_length_mm) %>% #changing tickets\n  slice_sample(n = 50) %>% #drawing 50 times without replacement\n  group_by(species, sex) %>%\n  summarise(mean_flipper_length_mm = mean(flipper_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    mean_flipper_length_mm\n  <fct>     <fct>                   <dbl>\n1 Adelie    female                   190.\n2 Adelie    male                     194.\n3 Chinstrap female                   194.\n4 Chinstrap male                     197 \n5 Gentoo    female                   211 \n6 Gentoo    male                     223 \n```\n:::\n:::\n\n\n### Drawing with replacement and without replacement\n#### What's the difference? \n\nConsider our first box again, the one with five tickets. \nWhen we draw at random *with* replacement, we draw one ticket, and put it back before drawing another ticket. For the box in this section, if we draw twice with replacement, both times we will draw from the following box:\n\n![](images/box.jpeg){fig-align=center width=\"200\"}\n\nIf we draw twice at random *without* replacement, then our second draw is from a *different* box, with an example illustrated below:\n\n![](images/no-replace-box.jpeg){fig-align=center width=\"300\"}\n\nIn the next set of notes, we are going to use R to simulate what happens when we draw twice from this box, once with replacement, and once without. We are also going to talk about the vocabulary of sampling.\n\n\n## Rules of chance\n\nWhat we have done here is estimate chances using the idea that the *chance* (or probability) of something is the proportion of times it occurs when we simulate over and over again the basic process that results in the thing we are counting. We have used the definition of the chance of an outcome to be the proportion of times we expect it to occur when the process that generates the event is  *independently* repeated many times [^freq].\n\nThe chance of an event (where an *event* might be one outcome, such as \"rolling a die and seeing 2\", or a collection of outcomes, such as \"rolling an even number\") needs to satisfy some basic mathematical rules (which are intuitively clear if you think of the chance of an event as its relative frequency):\n\n1. The chance of any event is at least 0 and not more than 1.\n\n2. We call the collection of all possible outcomes the *sample space*. The chance of an outcome being in the sample space is 1. \n\n3. If two events do not overlap, that is they have no outcomes in common, then the chance that *either* of the two events might occur is the *sum* of their chances.\nFor example, consider rolling a fair six-sided die, and the two events of rolling a multiple of 5 or a multiple of 2. In the first event (which we can call $A$), the possible outcomes are $\\{5\\}$. For the second event (call it $B$), the possible outcomes are $\\{2, 4, 6\\}$. Since all the sides of a fair die are equally likely, the chance of $A$ is the chance of rolling a $5$ which is $1/6$. The chance of rolling an even number is $1/6 + 1/6 +1/6 = 3/6$ (applying the same idea of adding up the chances, since we can't have the die show two sides at the same time). \nThis implies that the chance of *either* $A$ *or* $B$ happening is $1/6 + 3/6 = 4/6$.\n\nNote that *both* events cannot happen - using a six-sided die, you cannot roll a multiple of 5 that is also an even number. We say then that the event that both $A$ and $B$ happen is impossible, and impossible events have no chance of occurring. That is the chance of $A$ *and* $B$ is 0. We call $A$ and $B$ *mutually exclusive* events.\n\n**Addition rule**\nThe third rule above, that says that the chance of either $A$ or $B$ for mutually exclusive events $A$ and $B$ is the sum of their chances, is called the *addition rule*. \n\n\n## Summary\n\nIn this lecture, we introduced the box model as a way to understand the variability of a chance process, as box of tickets, where each ticket represents a population element. The tickets are identical except for what is written on them. We can use the box model to understand chance processes, and to generalize from samples that have been collected using chance methods, to the target populations. We saw that the draws from a box give us a *representative* sample of the tickets in the box.\n\nWe looked at how to set up the box model to represent various chance processes, and saw how to modify the tickets so that we could use the draws to estimate proportions, or chances.\n\nOnce we had set up a box model, we simulated drawing from the box and computing summary statistics in R. \n\nFinally, we wrote down the mathematical rules of chance, or probability.\n\nIn the next section, we will learn about sampling distributions, how we can generalize from random samples to the populations that they were drawn from, and how we can model these using the box model. \n\n [^freq]: This is known as the *frequentist* theory of probability: the chance of something is the relative frequency with which it occurs in repeated trials (that are assumed to be independent).\n\n[^fppbox]: The box model was introduced by Freedman, Pisani, and\nPurves in their textbook\n[*Statistics*](https://wwnorton.com/books/9780393929720)\n[^uar]: We call the tickets equally likely when each ticket has the same chance of being drawn. That is, if there are $n$ tickets in the box, each has a chance of $1/n$ to be drawn. We also refer to this as drawing a ticket *uniformly at random*, because the chance of drawing the tickets are the same, or *uniform*.\n[^unsplash]: Photo via unsplash.com",
    "supporting": [
      "notes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}