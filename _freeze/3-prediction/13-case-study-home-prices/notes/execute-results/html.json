{
  "hash": "5afd8eae031383d4f6d04222790d9d1e",
  "result": {
    "markdown": "---\ntitle: \"Case Study: Pricing Homes\"\nsubtitle: \"Data wrangling, recoding, and transformations.\"\ndate: \"10/05/2022\"\nimage: images/la-houses.jpg\nformat:\n  html:\n    code-fold: true\n    code-link: true\n    code-summary: \".\"\nexecute: \n  warning: false\n  message: false\n  fig-width: 5\n  fig-height: 3\n  fig-align: \"center\"\n---\n\n\n[[Discuss]{.btn .btn-primary}](https://edstem.org) [[Reading Questions]{.btn .btn-primary}](https://www.gradescope.com/courses/416233)\n[[PDF]{.btn .btn-primary}](notes.pdf)\n\n\\\n\n[T]{.dropcap}he linear model toolkit that we have put together has grown. From a simple beginning with one predictor, we can now include many predictors, numerical and categorical alike. We can also add polynomials and transformations in order to capture non-linear relationships in the data. In these lecture notes, we'll put this tool kit into practice to work through a case study to predict the price of a house. Along the way, we'll review important concepts and introduce a few new wrinkles.\n\nFor many Americans, buying a house is one of the most important decisions that they will make. It determines who their neighbors will be and where children will likely go to school. It is also often the largest financial decision they will ever make, so it is essential that the price of a house be carefully considered. One of the ways to put the price of a house into context is to consider the difference between the price that is listed and the price predicted by a statistical model fitted to data on similar houses.\n\nHere we will build such a model for a specific purpose: predicting the price of a house in Los Angeles. We have access to data on all of the houses that sold in four cities around west LA in the course of a single month. The model that we fit will be of the form\n\n$$ \\widehat{price} = b_0 + b_1 x_1 + \\ldots + b_p x_p $$\n\nWhere the $y$ variable will be the selling price and the predictors, $x_1$ to $x_p$ will be $p$ characteristics of the houses, such as their size and location.\n\n![](images/la-houses.jpg){fig-align=center width=\"500\"}\n\n## Data Wrangling\n\n:::{.callout-tip}\n\n## Code along\n\nAs you read through these notes, keep RStudio open in another window to code along at the console.\n:::\n\nLet's begin by loading in the data set.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(tidyverse)\nLA <- read_csv(\"https://www.dropbox.com/s/nzhmtmmnz4ix4rd/LA.csv?dl=1\")\n```\n:::\n\n\nBefore jumping into fitting a model to a data set, it is important to verify that that it contains the information you expect in a format you can work with. With real-world data, this is often not the case. It may have been collected for a different purpose, be stored as a different type of data that what you need, or be poorly documented. The collection of tasks involved in getting a raw data set into the shape where you can being an analysis is often called *data wrangling* and encompasses many computational steps you have seen such as filtering rows, changing data types, and mutating new columns.\n\nLet's have a look at the top 10 rows of the data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nLA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,594 × 8\n   city       type    bed  bath garage  sqft pool   price\n   <chr>      <chr> <dbl> <dbl> <chr>  <dbl> <chr>  <dbl>\n 1 Long Beach <NA>      0     1 0        513 <NA>  119000\n 2 Long Beach <NA>      0     1 0        550 <NA>  153000\n 3 Long Beach <NA>      0     1 0        550 <NA>  205000\n 4 Long Beach <NA>      0     1 1       1030 <NA>  300000\n 5 Long Beach <NA>      0     1 1       1526 <NA>  375000\n 6 Long Beach <NA>      1     1 0        552 <NA>  159900\n 7 Long Beach <NA>      1     1 0        558 <NA>  135000\n 8 Long Beach <NA>      1     1 0        596 <NA>  105000\n 9 Long Beach <NA>      1     1 0        744 <NA>  167000\n10 Long Beach <NA>      1     1 0        750 <NA>  134900\n# … with 1,584 more rows\n```\n:::\n:::\n\n\nThis data set comes with no data dictionary or help file, so we'll have to do some detective work to understand what is contained in each of the columns. Let's go through them one by one.\n\n### `city`\n\nWe can see above that the first 10 rows record home sales in the city of Long Beach. What other cities are recorded in this data set? A quick way to get a sense of the distribution of the `city` variable is to count it up.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nLA %>%\n    count(city)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  city              n\n  <chr>         <int>\n1 Beverly Hills   232\n2 Long Beach     1062\n3 Santa Monica    204\n4 Westwood         96\n```\n:::\n:::\n\n\nWe see that there are four cities in this data set: Beverly Hills, Long Beach, Santa Monica, and Westwood. We also can see from this that the vast majority of home sales were in Long Beach.\n\nThis variable turned out to be as we might expect it. Let's move on to the next variable to see what more work there is to be done.\n\n### `type`\n\nWhat do you think `type` refers to? We can see that it is stored as a character vector, so we can try the same thing that we did for `city` and count it up.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nLA %>%\n    count(type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  type          n\n  <chr>     <int>\n1 Condo/Twh   639\n2 SFR         916\n3 <NA>         39\n```\n:::\n:::\n\n\nWe can infer from this that `type` refers to the type of residential structure: either a condo / townhouse or a single-family residence (SFR). We also learn that there are 39 rows that are NA. NA stands for \"not applicable\" or \"no answer\" and indicates that nothing was recorded for this variable. Missing data is a perennial challenge in data analysis. In general, it is best to avoid removing rows with missing values it is necessary (say, for calculating a summary statistic). Missing values often indicate important characteristics about the data collection process and good cues that you should learn more about how the data was recorded and why those values are missing.\n\n### `bed` and `bath`\n\nBed and bath appear to count up the number of bedrooms and bathrooms in each house. That seems straightforward enough. Still, let's follow the practice of counting up the number in each value to see if anything jumps out.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nLA %>%\n    count(bed)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 2\n     bed     n\n   <dbl> <int>\n 1     0    12\n 2     1   188\n 3     2   570\n 4     3   472\n 5     4   210\n 6     5    90\n 7     6    33\n 8     7    10\n 9     8     4\n10     9     2\n11    10     1\n12    12     1\n13    17     1\n```\n:::\n:::\n\n\nIt is the extremes that are surprising here. There were 12 houses that sold with zero bedrooms - what were those? Most likely those were studios, dwellings where the bedroom is co-located with the main living area.\n\nAt the other extreme, we see houses with up to 17 bedrooms? Could this be correct? This data set captures home sales in some very wealthy parts of Los Angeles, so amazingly yes, it is possible that this is an accurate value. Nonetheless, we should keep this in mind as we proceed with our analysis: this data set appears to have data on some *very* large houses.\n\nWe might expect that the number of bathrooms covers a similarly extreme range of values.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nLA %>%\n    count(bath)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 28 × 2\n    bath     n\n   <dbl> <int>\n 1  1      422\n 2  1.25     1\n 3  1.5     11\n 4  1.75    10\n 5  2      579\n 6  2.5     86\n 7  2.75     2\n 8  3      220\n 9  3.5     35\n10  3.75     1\n# … with 18 more rows\n```\n:::\n:::\n\n\nThis is unexpected: there was one house recorded with 1.25 bathrooms and two more with 2.75 bathrooms. A half-bathroom normally refers to a bathroom with a toilet and sink but no shower or bath. It is unclear what a quarter bathroom refers to. There do not appear to be many quarter and three-quarter bath houses in this data set, so their impact won't be dramatic, but it is a question worth researching and putting to a real estate agent with more knowledge of this sort of data.\n\n### `garage`\n\nLet's move on to the `garage` variable.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nLA %>%\n    count(garage)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  garage     n\n  <chr>  <int>\n1 0        625\n2 1        260\n3 2        666\n4 3         37\n5 4+         6\n```\n:::\n:::\n\n\nThis appears to be the size of the garage: 1 car, 2 car, etc. But there is something  strange here: below the word `garage` in the output above, it shows the type as character, not numeric (or double or integer).\n\nThe key to this oddity is in the fourth level shown: `4+`. While that level is easy enough for a human to understand - houses with four or more car garages - the computer does not have that context. Instead, the computer runs into the `+` character and, not knowing how to turn this into a number, turns the whole variable into a character vector instead.\n\nThere are a few ways that we could think about integrating this information into our model.\n\n#### Collapsing into a simpler factor\n\nOne approach is to collapse several of these levels into a single factor. That can be accomplished using the `fct_collapse()` function to mutate a new variable called `garage_cat`, providing each new level on the left side of `=` and the original level(s) on the right side.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nLA <- LA %>%\n  mutate(garage_cat = fct_collapse(garage,\n                                   \"none\" = \"0\",\n                                   \"small\" = \"1\",\n                                   \"large\" = c(\"2\", \"3\", \"4+\")))\nLA %>%\n    count(garage_cat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  garage_cat     n\n  <fct>      <int>\n1 none         625\n2 small        260\n3 large        709\n```\n:::\n:::\n\n\nAs we saw in previous notes, a categorical variable can be used as a predictor in a linear model by converting it into a dummy variable that takes a value of 0 for the reference level and a value of 1 for the level corresponding to the name of the dummy variable. A two-level categorical variable requires 1 dummy variable. A three-level categorical variable like this one will require two dummy variables: one for `none` and one for `small`. The third level, `large` will become the reference level because it is first alphabetically and will still be present in the model through the intercept term.\n\nThe recoding of a factor into dummy variables is a mutate step, but there is no need to do it manually. R does it automatically when you provide a categorical variable within the formula of the `lm()` function.\n\n#### Converting to a numeric vector\n\nThe other option with `garage` is to leverage the fact that for most of the observations, we do have numerical values recorded. The only issue are those six observations listed as `\"4+\"`. Since there are very few of them, one option is to replace them with missing values using `na_if()` then immediately convert the character vector into a numerical vector using `as.numeric()`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nLA <- LA %>%\n    mutate(garage_num = na_if(garage, \"4+\"),\n           garage_num = as.numeric(garage_num))\nLA %>%\n    count(garage_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  garage_num     n\n       <dbl> <int>\n1          0   625\n2          1   260\n3          2   666\n4          3    37\n5         NA     6\n```\n:::\n:::\n\n\n`garage_num` is now a numerical variable (called \"dbl\") that can be incorporated into our model like any other numerical variable. It will result in one just coefficient: the slope in front of the `garage_num` variable.\n\nTo recap how we've treated `garage`, let's glance at the original column next to its categorical and numerical derivatives.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nLA %>%\n    select(garage, garage_cat, garage_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,594 × 3\n   garage garage_cat garage_num\n   <chr>  <fct>           <dbl>\n 1 0      none                0\n 2 0      none                0\n 3 0      none                0\n 4 1      small               1\n 5 1      small               1\n 6 0      none                0\n 7 0      none                0\n 8 0      none                0\n 9 0      none                0\n10 0      none                0\n# … with 1,584 more rows\n```\n:::\n:::\n\n\n\n### `sqft`\n\nFrom the original glance at the `sqft` column, it appeared that it contains the square footage of the house. We can do a sanity check by summarizing this numerical variable with its median, min, and max values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nLA %>%\n    summarize(med_sqft = median(sqft),\n              min_sqft = min(sqft),\n              max_sqft = max(sqft))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  med_sqft min_sqft max_sqft\n     <dbl>    <dbl>    <dbl>\n1     1380      403    28000\n```\n:::\n:::\n\n\nThis looks reasonable at first glance. There is a very small house (~400 sqft) a massive house (28,000 sqft) but a typical value of 1,380. This variable seems to be as we expected and in good shape.\n\nNow that we have a better understanding of most of our variables and have some some work to wrangle them into a mode more amendable to visualization and modeling, let's proceed to the next step of the analysis: exploratory data analysis.\n\n## Exploratory Data Analysis\n\nExploratory data analysis (or EDA) is an interative process that uses the tools of summary statistics and visualization to build an understanding of the structure of a data set to help inform your analysis. It often interleaves with data wrangling as you back and forth between uncovering structure and then addressing them.\n\nIn a predictive model, the most important variable is the one that you aim to predict, the response. In this setting, that is the `price` variable. It is a numerical variable, so we can visualize its distribution using a histogram.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nLA %>%\n    ggplot(aes(x = price)) +\n    geom_histogram(color = \"white\") +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=480}\n:::\n:::\n\n\nThe most notable feature of this distribution is the strong right skew. Although it is difficult to tell, there are few homes with very very high prices that have resulted in the x-axis having a very large range. The result is that most home prices are stacked up along the left side and are difficult to distinguish. This will be something we will want to pay close attention to.\n\nHow does the distribution of price change from city to city? A good visualization option here is the violin plot (a boxplot would work well too).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nLA %>%\n    ggplot(aes(x = city, y = price)) +\n    geom_violin() +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=480}\n:::\n:::\n\n\nThese are some strange looking violins! The reason is one more those very expensive homes that are extending the y-axis this time. One thing this graphic reveals: all of those most expensive homes appear to be located in Beverly Hills.\n\nWe can also look at the relationship between price and another predictor: the square footage of the house. Since this variable is numeric, the natural choice is a scatter plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nLA %>%\n    ggplot(aes(x = sqft, y = price)) +\n    geom_point(alpha = .4) +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=480}\n:::\n:::\n\n\nThis graphic reveals that there are three home in particular that stand out for their very high price and very high square footage[^bighouse].\n\nThere are two routes we could take here. One would be to consider these three points to be **outliers**, observations that don't fit the trend of the rest of the data, and filter them out. In doing so, we'd be making the decision to build a model that explicitly does not predict the price of mega-mansions.\n\nThe other route is to retain those points under the rationale that they are not outliers because they fit the trend of the data if we allow that trend to be non-linear. Let's use a technique from the previous lecture notes and transform these original variables using the natural logarithm.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nLA <- LA %>%\n    mutate(log_price = log(price),\n           log_sqft = log(sqft))\n```\n:::\n\n\nThe natural logarithm is a transformation that has the effect of stretching out very small values and compressing larger values, essentially reeling in the right tale of each of these distributions. We can see the effect by re-plotting the histogram of log price.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nLA %>%\n    ggplot(aes(x = log_price)) +\n    geom_histogram(color = \"white\") +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=480}\n:::\n:::\n\n\nThere is still some right skew, but it is much smaller and we're able to visualize all of our data. The same goes for the violin plots.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nLA %>%\n    ggplot(aes(x = city, y = log_price)) +\n    geom_violin() +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=480}\n:::\n:::\n\n\nNow we learn much more. Homes in Beverly Hills are still on average more expensive, but we see now that homes in Long Beach are also markedly less expensive. The homes in Westwood also appear to have less variability that the other cities.\n\nWhen we re-plot the scatter plot using the transformed variables, the result is a scatter plot much more amendable to prediction with a linear model.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nLA %>%\n    ggplot(aes(x = log_sqft, y = log_price)) +\n    geom_point(alpha = .4) +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=480}\n:::\n:::\n\n\nIn this transformed space, those mega-mansions suddenly don't look like such outliers afterwards; they're just the most extreme values of a trend that's fairly linear between the log square footage of a home and its log price.\n\nWith these transformed variables on hand, lets build some models.\n\n[^bighouse]: To put this largest house in context, the palatial University House, the home of the Chancellor, is 20,000 sqft.\n\n\n## Model Fitting and Evaluation\n\nWe will construct three models: a simple linear regression that utilizes only the size of the house, a multiple regression model that involves the categorical version of garage, and a variant of this model than involves the numerical version of garage. All models will use the log-transformed version of `price` and `sqft`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nm1 <- lm(log_price ~ log_sqft, \n         data = LA)\nm2 <- lm(log_price ~ log_sqft + city + bed + bath + garage_cat,\n         data = LA)\nm3 <- lm(log_price ~ log_sqft + city + bed + bath + garage_num,\n         data = LA)\n```\n:::\n\n\nEach of these models can be used to make a prediction for a house for sale in LA. Say I'm considering purchasing a 1,500 sqft house in Long Beach with a 3 bedrooms, 2 bathrooms, and 1 car garage. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nnew_data <- data.frame(log_sqft = log(1500),\n                       city = \"Long Beach\",\n                       bed = 3, bath = 2,\n                       garage_cat = \"small\",\n                       garage_num = 1)\n\ny_hat_1 <- predict(m1, new_data)\ny_hat_2 <- predict(m2, new_data)\ny_hat_3 <- predict(m3, new_data)\nc(y_hat_1, y_hat_2, y_hat_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       1        1        1 \n13.24540 12.97235 12.95307 \n```\n:::\n:::\n\n\n12 or 13 dollars!? These predictions are unfortunately not quite right.\n\nRecall that these model are predicting the log of the price of the house. To convert from log dollars back to normal dollars, it is necessary to take the inverse of the natural log, $e^x$, by using the `exp()` function in R.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nc(exp(y_hat_1), exp(y_hat_2), exp(y_hat_3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       1        1        1 \n565462.5 430348.7 422129.4 \n```\n:::\n:::\n\n\nThese predictions look more reasonable: around \\$500,000 dollars.\n\nBut which of these predictions is best? One way to make this decision is to calculate $R^2$ for each of the models to capture how well they explain the variability in the $y$ found in this data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(broom)\nr2_1 <- glance(m1) %>%\n    select(r.squared)\nr2_2 <- glance(m2) %>%\n    select(r.squared)\nr2_3 <- glance(m3) %>%\n    select(r.squared)\n\nc(r2_1, r2_2, r2_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$r.squared\n[1] 0.7737839\n\n$r.squared\n[1] 0.8756131\n\n$r.squared\n[1] 0.8751031\n```\n:::\n:::\n\n\nThe $R^2$ values show that including the extra information on the city, bed, bath, and garage improves the model's explanatory power by about 10 percentage points. That is helpful! The difference between the two larger models - one with garage turned into dummy variables and the other with garage as numerical variable - is very small. This suggests that our decision during data wrangling was not terribly consequential and that both forms of the variable work similarly well.\n\nAt this point, our best models suggest that this home in Long Beach can fetch between roughly \\$422,000 and \\$430,000 on the market. If you are very committed to buying this particular house, you might want to offer a price greater than \\$430,000. If you are less committed, you might try making a lower offer, say around \\$410,000. There is a greater risk that someone else will offer a higher price and get the house, but if you do end up with the house, you will have done so knowing that you may well have gotten a bargain.\n\n## Summary\n\nIn this case study we walked through a practical exercise in building a predictive model: predicting the sale price of a house. Through the process of data wrangling we learned to be aware of missing values, how to collapse levels of a categorical variable, and how to convert a variable from categorical to numeric. During exploratory data analysis we learned how to identify extreme values in our data and deal with them either as outliers or as indicators of the need for transformations. We fit several models and confirmed what we learned previously: that adding additional variables will improve the $R^2$ of your model.\n\nIn class we will continue with this example to deepen out understanding of how to apply linear models for prediction.\n",
    "supporting": [
      "notes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}