---
title: "Introducing Probability"
subtitle: "Definitions, examples, and axioms"
image: images/dice-players-painting.jpeg
format:
  html: default
  pdf: default
---

```{r}
#| echo: false
#| message: false
#| warning: false

library(tidyverse)
library(stat20data)
library(infer)
library(patchwork)
```

:::{.lo .content-hidden unless-profile="staff-site"}
#### Concept Acquisition

1. Definition of probability, outcome space, events, null event
2. Relations to sets, unions, intersections, Venn diagrams
3. Definition of equally likely outcomes
4. Definition of mutually exclusive events and the addition rule

#### Tool Acquisition

1. Rules of probability
2. Using a box of tickets to model equally likely outcomes
3. New functions: **sample()** and **replicate**
4. Using simulations to estimate probabilities with functions listed above

#### Concept Application

1. Computing probabilities in various scenarios 
2. Using R to simulate probabilities


----------------------------------------------------

:::

[I]{.dropcap}n an enormously entertaining paper written about a decade ago, the economist Peter Backus estimated his chance of finding a girlfriend on any given night in London at about 1 in 285,000 or 0000034%. As he writes, this is either depressing or cheering news, depending on what you had estimated your chance to be *before* reading the paper.[^Backus]

[^Backus]: paper is at <https://www.astro.sunysb.edu/fwalter/AST248/why_i_dont_have_a_girlfriend.pdf> and a talk by Backus at <https://www.youtube.com/watch?v=ClPPSry8bBw>

We all have some notion of chance or probability, and ask questions like:

- What is the chance you will get an A in Stat 20? (About 32%, based on last fall.)[^stat-20-A]
- What is the chance the 49ers will win the Super Bowl this year? (About 1 in 7, higher than any other team, as of September 21.)[^49ers]
- What is the chance you will roll a double on your next turn to get out of jail while playing Monopoly? (One in six.)
- What is the chance that the next President of the United States will be Joe Biden? (A little under 40%.) [^biden-odds]

[^49ers]: <https://www.foxsports.com/articles/nfl/2023-24-san-francisco-49ers-odds-odds-to-win-super-bowl-nfl-playoffs-division>
[^stat-20-A]: <https://berkeleytime.com/grades/0-7077-all-all&1-7077-fall-2022-all>
[^biden-odds]: <https://www.thelines.com/odds/election/>

To answer such questions, we need to quantify uncertainty and randomness, and that is the focus of this new unit: **Generalization**.

![](images/andrew-gen-focus.jpeg){fig-align=center width="400"}

So far, we have examined datasets, and summarized them, both numerically and visually.  We have looked at data distributions, and associations between variables. Can we extend the conclusions that we make about the datasets to larger populations? If we notice that bill length and flipper length have a strong linear relationship for the penguins in our data, can we say this is true about all penguins? How do we draw **valid** conclusions about the population our data was drawn from? These are the kinds of questions we we will study, using tools from probability theory. 

In order to be taken seriously, we need to be careful about how we collect data, and then how we generalize our findings. For example, you may have observed that some polling companies are more successful than others in their estimates and predictions, and consequently people pay attention to them. Below is a snapshot of rankings of polling organizations from the well-known website FiveThirtyEight[^538]. According to the website, the rankings are based on the polling organization's ``historical accuracy and methodology''.

[^538]: This website was begun as poll aggregation site, by the statistician Nate Silver.

![](images/538-pollster-ranking-snippet.png){fig-align=center width="500"}

In order to make estimates as these polling organizations are doing, or understand the results of a clinical trial or such questions in which we *generalize* from our data sample to a larger group, we have to understand the *variations* in data introduced by randomness in our sampling methods. Each time we poll a different group of voters, for example, we will get a different estimate of the proportion of voters that will vote for Joseph Biden in the next election. To understand variation, we first have to understand how probability was used to collect the data. 

Since classical probability came out of gambling games played with dice and coins, we can begin our study by thinking about those.

## De Méré's Paradox

![](images/dice-players-painting.jpeg){fig-align=center width="400"}

[^dice-players]: Georges de La Tour, Public domain, via Wikimedia Commons


In 17th century France, gamblers would bet on anything. In particular, they would bet on a fair six-sided die landing 6 at least once in four rolls. Antoine Gombaud, aka the Chevalier de Méré, was a gambler who also considered himself something of a mathematician. He computed the chance of a getting at least one six in four rolls as 2/3 $4 \times (1/6) = 4/6$. He won quite often by betting on this event, and was convinced his computation was correct. Was it? 

The next popular dice game was betting on at least one double six in twenty-four rolls of a pair of dice. De Méré knew that there were 36 possible outcomes when rolling a pair of dice, and therefore the chance of a double six was 1/36. Using this he concluded that the chance of at least one double six in 24 rolls was the same as at least one six in four rolls, that is, 2/3 ($24 \times 1/36$). He happily bet on this event (at least one double six in 24 rolls) but to his shock, lost more often than he won! What was going on?

We will see later how to compute this probability, but for now we can guess the value by simulating the game 1000 times and looking at the proportion of times we see at least one six in 4 rolls of a fair die, and do the same with at least one double six in 24 rolls.

```{r}
#| echo: false
#| message: false
#| warning: false

#### de Mere - first game

die <- 1:6

num_simulations <- 1000
cat("Number of simulations =", sep = " ", num_simulations)

die_4 <- replicate(num_simulations, sample(die, 4, replace = TRUE))


die_4_df <- data.frame(t(die_4))

colnames(die_4_df) <- paste("roll", sep = " ", 1:4)

rownames(die_4_df) <- paste("simulation", sep = " ", 1:num_simulations)

#head(die_4_df)

die_4_df %>% 
  mutate(at_least_one_six = if_any(everything(), ~ . == 6)) %>%
  summarise(prop_wins_game_1 = mean(at_least_one_six))

######## de mere second game

pair_dice <- c( 2, 3, 3, rep(4,3), rep(5,4), rep(6, 5), rep(7,6), 
                rep(8,5), rep(9,4), rep(10,3), rep(11,2), 12)

## note, not ideal because if see 7 don't know how we got it

dice_24 <- replicate(num_simulations, sample(pair_dice, 24, replace = TRUE) )


dice_24_df <-  data.frame(t(dice_24)) 

colnames(dice_24_df) <- paste("roll", sep = " ", 1:24)

rownames(dice_24_df) <- paste("simulation", sep = " ", 1:num_simulations)

#head(dice_24_df)

dice_24_df %>% 
  mutate(at_least_one_boxcars = if_any(everything(), ~ . == 12)) %>%
  summarise(prop_wins_game_2 = mean(at_least_one_boxcars))


##########

```


You can see here that the poor Chevalier didn't compute the chance correctly.  `r emo::ji("monocle")` You can play with this simulation in the ``Ideas in Code'' section below.


## Basics

Before we get going with examples, let's establish some terminology: 

Experiment
: An action, involving chance, that can result in a finite number of possible *outcomes* (results of the experiment). For example, a coin toss is an experiment, and the possible outcomes are the coin landing heads or tails.

Outcome space
: This is just a set. It is the collection of all the possible outcomes of an experiment is called an outcome space or *sample* space, and we denote it by the upper case Greek letter $\Omega$ (``Omega''). For example, if we toss a coin, then the corresponding $\Omega = \{\text{Heads, Tails}\}$. If we roll a die, then the corresponding $\Omega = \{1, 2, 3, 4, 5, 6\}$. We will denote a set by enclosing the elements of the set in braces: $\{ \}$. 

Event
: A collection of outcomes as a result of the experiment being performed, perhaps more than once. For example, we could toss a coin twice, and consider the *event* of both tosses landing heads. We usually denote events by upper case letters from the beginning of the alphabet: $A, B, C, \ldots$. An event is a subset of the outcome space, and we denote this by writing $A \subset \Omega$.

##### Example 1: Tossing a fair coin 

![](images/us-quarter.png){width="100" fig-align="center"}

Suppose we toss a fair coin, and I ask you what is the chance of the coin landing heads. Like most people, you reply 50%. Why? Well... (you reply) there are two possible things that can happen, and if the coin is fair, then they are both equally likely, so the probability of heads is 1/2 or 50%. 

Here, we have thought about an event (the coin landing heads), seen that there is one outcome in that event, and two outcomes in the outcome space, so we say the probability of the event is 1/2. We can generalize this: let's say that there are $n$ possible outcomes in the outcome space $\Omega$, and an event $A$ has $k$ possible outcomes. If all the outcomes are equally likely to happen (as in a die roll or coin toss), then we say that the chance of $A$ is $\displaystyle \frac{k}{n}$. If we denote the probability of the event $A$ as $P(A)$, then we can say that 
$$
P(A) = \frac{k}{n}
$$

For a fair coin, we can say $P(\text{Heads}) = \displaystyle \frac{1}{2}$.

Equally likely outcomes
: When all the possible outcomes in a finite outcome space of size $n$ happen with the same probability, which is $\displaystyle \frac{1}{n}$. To find the probability of an event $A$, just count how many outcomes are in $A$ and divide that by $n$.


##### Example 2: Tossing a fair six-sided die[^dice] 

[^dice]: The singular is *die* and the plural is *dice*. If we use the word "die" without any qualifiers, we will mean a fair, six-sided die. 

Consider rolling a fair six-sided die: six outcomes are possible so $\Omega = \{1, 2, 3, 4, 5, 6\}$. Since the die is fair, each outcome is equally likely, with probability $= \displaystyle {1}{6}$. We can list the outcomes and their probabilities in a table. 

|**Outcome** | $1$ | $2$ | $3$ | $4$ | $5$ | $6$ |
|:----:|:----:|:----:|:----:|:----:|:----:|:----:|
|**Probability**| $\displaystyle \frac{1}{6}$ |$\displaystyle \frac{1}{6}$ |$\displaystyle \frac{1}{6}$ |$\displaystyle \frac{1}{6}$ |$\displaystyle \frac{1}{6}$ |$\displaystyle \frac{1}{6}$ |

In order to compute the probabilities of events, we need to set some rules. 

## Axioms of probability

The probability (or chance - we use these words interchangebly) of an event needs to satisfy some basic mathematical rules called _axioms_ (which are intuitively clear if you think of the probability of an event as the proportion of the outcomes that are in it). There are three basic rules that will help us compute probabilities:

Rule 1
: The chance of any event is at least $0$ ($P(A) \ge 0$ for any event $A$). 

Rule 2
: The chance of an outcome being in $\Omega$ is $1$ ($P(\Omega) = 1$). This is true because we can consider that the probability of $\Omega$ is the number of outcomes in $\Omega$ divided by $n$, which is $n/n = 1$.

Note that the set with no outcomes in it is called the *impossible event* and denoted by the symbol for the empty set $\emptyset$. The probability of the impossible event is $0$.

Before we write the third rule, we need a definition and some notation:

Union of events
: Given events $A$, $B$, we can define a new event called $A$ *or* $B$, which consists of all the outcomes that are *either* in $A$ *or* in $B$ or in both.  This is also written as $A \cup B$, read as ``$A$ union $B$''.

Intersection of events
:  Given events $A$, $B$, we can define a new event called $A$ *and* $B$, which consists of all the outcomes that are *both* in $A$ *and* in $B$. This is also written as $A \cap B$, read as ``$A$ intersect $B$''.

Now we consider events that *don't* intersect or overlap at all, that is, they are *disjoint* from each other, or mutually exclusive:

Mutually exclusive events
: If two events $A$ and $B$ do not overlap, that is, they have **no outcomes in common**, we say that the events are *mutually exclusive*. Note that if $A$ and $B$ are mutually exclusive, then we know that if one of them happens, the other one **cannot**. We denote this by writing $A \cap B = \emptyset$ and read this as $A$ *intersect* $B$ is empty. Therefore, we have that $P(A \cap B) = P(\emptyset) = 0$. 

For example, if we are playing De Méré's second game, the event that we roll a pair of sixes and the event that we roll a pair of twos cannot happen on the same roll. These are mutually exclusive. 
Another example: the events that President Biden is re-elected and the event that Donald Trump is elected as President cannot both happen, therefore they are mutually exclusive events. 

<details><summary>More examples:</summary>
If we roll a die, the events that we roll an *even* number and the event that we roll an *odd* number are mutually exclusive, but the events that we roll an *even* number and the event that we roll a *prime* number are **not** mutually exclusive, since the number 2 is both even and prime.

<br>

The event that Manchester City wins the English Premier League in 2024, and the event that Arsenal wins the EPL in 2024 are mutually exclusive, but the events that Manchester City are EPL champions in 2024 and Manchester City are EPL champions in 2023 are *not* mutually exclusive. 
</details>

Now for the third axiom:

Rule 3
: If $A$ and $B$ are mutually exclusive ($A \cap B = \emptyset$), then $P(A \cup B) = P(A) + P(B)$. That is, for two **mutually exclusive** events, the probability that *either* of the two events might occur is the *sum* of their probabilities. This is called the *addition rule*.

<details><summary> Example:</summary>
For example, consider rolling a fair six-sided die, and the two events $A$ and $B$, where $A$ is the event of rolling a multiple of $5$, and $B$ is the event that we roll a multiple of $2$. <br>

The only outcome in $A$ is $\{5\}$, while $B$ consists of $\{2, 4, 6\}$.
$P(A) = 1/6$, and $P(B) = 3/6$. Since $A \cap B =\emptyset$, that is, $A$ and $B$ have no outcomes in common, $P(A \cup B) = P(A) + P(B) = 1/6 + 3/6 = 4/6$.
</details>

An important consequence of rule 3: Let $A$ be an event in $\Omega$. The *complement* of $A$, written as $A^C$  consists of all those outcomes in $\Omega$ that are *not* in $A$. Note that $A  \cup A^C = \Omega$, so $P(A) + P(A^C) =  1$.


## Examples using the rules

#### Penguins

Consider the penguins data, which has 344 observations, of which 152 are Adelie penguins, and 68 are Chinstrap penguins. Suppose we pick a penguin at random, what is the probability that we would pick an Adelie penguin? What about a Gentoo penguin?

<details> <summary> Check your answer </summary>
Let $A$ be the event of picking an Adelie penguin, $C$ be the event of picking a Chinstrap penguin, and $G$ be the event of picking a Gentoo penguin. 
Assuming that all the penguins are equally likely to be picked, we see that then $P(A) = 152/344$, and $P(C) = 68/344$. Since only one penguin is picked, we see that $A, C$, and $G$ are mutually exclusive. This means that $P(A)+P(C)+P(G) = 1$, since $A, C$, and $G$ together make up all of $\Omega$. Therefore the complement of $G$ which is a penguin that is not Gentoo consists of Adelie and Chinstrop penguins, and $P(G^C) = P(A \cup C) = P(A) + P(C) = (152+68)/344 = 220/344$ (addition rule).

Finally, the complement rule tells us that $P(G) = 1 - P(G^C) = 1 - 220/344 = 124/344$.
</details>


:::{.callout-important icon=false}

## WARNING!!
We use $A$ to denote an *event* or a set, while *P(A)* is a *number* - you can think of $P(A)$ as representing the relative size of $A$. This means that the following types of statements don't make sense as we can't add sets and we can't union numbers:

- $P(A) \cup P(B)$ or $P(A) \cap P(B)$
- $A + B$, or $A - B$, or $A \times B$ etc

:::


## Venn Diagrams

We often represent events using *Venn diagrams*. The outcome space $\Omega$ is usually represented as a rectangle, and events are represented as circles inside $\Omega$. Here is a Venn diagram showing two events $A$ and $B$, their intersection, and their union:

![](images/venn-diagram-1.png){fig-align=center width="500"}

Here is a Venn diagram showing two mutually exclusive events (no overlap):

![](images/venn-disjoint.png){fig-align=center width="500"}




## Example: The Box Model

One of the simplest ways of understanding probability, and later, variations resulting from sampling, is through a *box model*[^fppbox]. We visualize our outcome space as a box, and the *equally likely* outcomes as tickets that we draw from the box.
To specify a box model, we have to say what tickets go in the box (that is, what are the numbers on the tickets, and how many of each) , and whether the tickets will be drawn *with or without replacement* (after drawing a ticket from the box, do we put it back in the box or not, before we draw another ticket).

### A box of tickets

![](images/box-1.jpeg){fig-align=center width="400"}

Consider the box above which has five almost identical tickets. The only difference is the value written on them. Imagine that we shake the box to mix the tickets up, and then draw one ticket without looking. This is to ensure that all the tickets are *equally likely* to be drawn[^uar]. 
For example, the chance of drawing a ticket labeled "4" is one in five, as there are five tickets to choose from and only one is labeled "4" etc.

Here is the probability histogram of the value of the drawn ticket, and you see that the bar over 2 is twice as tall. This is because there are twice as many tickets marked 2 as any other numbers. The counts or frequencies of the tickets in the box is called the *population distribution* or the *box distribution*, and you can see that this gives us the probability distribution for the value of the ticket drawn at random from the box. 

```{r}
#| fig.width: 5
#| fig.height: 5
#| fig.align: center

tkts_box <- c(1, 2, 3, 4)
prob_box <- c(1/5, 2/5, 1/5, 1/5)

box <- c(1, 2, 2, 3, 4)

p1 <- data.frame(box) %>% 
  ggplot(aes(x=box)) +
  geom_bar(width = 0.98, fill = "darkorchid") +
  xlab("ticket value")  +
  ggtitle("Ticket distribution")

p2 <- data.frame(tkts_box) %>% 
  ggplot(aes(x=tkts_box, y=prob_box)) +
  geom_col(width = 0.98, fill = "goldenrod2") +
  xlab("ticket value") +
  ylab("probability")

p1+p2
```

Notice that the only difference between these two plots is the vertical scale. When the tickets are equally likely, the box distribution (the purple plot) completely determines the probability distribution (the golden plot).


<!-- Since the tickets are drawn according to their chance, we could compute what a draw would be, on average, by computing a weighted (by their chance) average of the possible values. We would get, for a single draw: $1\times \frac{1}{5} + 2 \times \frac{2}{5} + 3 \times \frac{1}{5} + 4 \times \frac{1}{5} = 2.4$. (Note that this exactly matches the average of the tickets in the box $= \displaystyle \frac{1 + 2 + 2 + 3 + 4}{5}$). -->

How about if we draw 50 times at random with replacement from this box and see what our sample looks like (we will explore the code later in the notes). That is, we will see what proportion of the draws are 1's, 2's etc.

```{r}
#| fig.width: 3
#| fig.height: 3
#| fig.align: center

set.seed(12345)
box <- c(1,2,2,3,4)
sample_size <- 50
sample_box <- sample(box, size = sample_size, replace = TRUE)
data.frame(sample_box) %>%
  ggplot(aes(sample_box)) + 
  geom_bar(aes(y = ..prop..), width = 0.98, fill = "blue") +
  xlab("values of draws") + 
  ylab("proportion of draws")
```

We can see that the (blue) *sample proportions* look similar to the (gold) *population (box) proportions* (the probability distribution above), but are somewhat different. It turns out that the counts of the drawn tickets are:

<center>
<div style="width:300px">

|    Ticket | Number of times drawn | Proportion of times drawn |
|:---------:|:---------------------:|:---------------------:|
| $\fbox{1}$| `r table(sample_box)[[1]]` | `r table(sample_box)[[1]]/sample_size` |
| $\fbox{2}$| `r table(sample_box)[[2]]` |`r table(sample_box)[[2]]/sample_size` |
| $\fbox{3}$| `r table(sample_box)[[3]]` | `r table(sample_box)[[3]]/sample_size` |
| $\fbox{4}$|  `r table(sample_box)[[4]]` | `r table(sample_box)[[4]]/sample_size` |

</div>
</center>

What we have seen here is how when we draw at random, we get a sample that resembles the population, that is, a *representative sample*.


**The Box Model**

The purpose of creating a box model is to understand the variability in a *chance process* such as tossing a coin over and over and counting the number of heads, or sampling voters to ask them if they will vote for President Biden in the 2024 elections. We do this by having the tickets represent the possible outcomes associated with the chance process, and using the variability in the tickets that are drawn to understand the variability of the chance process.

In order to create a box model that will model a process in which we have a repeated action (such as tossing a coin or drawing a ticket from a box), we must specify:

1. The box and tickets (what tickets go in the box, and the numbers written on them)
2. The number of draws
3. Whether or not we replace tickets between draws
4. How we will summarize the values on the drawn tickets (we will sum the draws or compute their average)

Note that these tickets should be identical in every way, except the value written on them, and  assume that the tickets in the box are *equally likely* to be drawn (we draw without looking into the box).

### Setting up a box model: examples
Let's practice creating boxes to model coin tosses and die rolls. For each of the cases below, specify the four items above.

##### Example 1: Tossing a coin

**Tossing a fair coin once**

What box and which tickets would you use to simulate one coin toss? 

<details><summary>Check your answer</summary>
We could draw one ticket from the box
![](images/coin_ht.jpeg){fig-align=center width="100"} but these are not numbered.

Or we could draw one ticket from the box
![](images/coin.jpeg){width="100"}
with the ticket $\fbox{1}$ representing the coin landing heads, and $\fbox{0}$ representing the coin landing tails. This change of numbering the ticket representing the outcome we are counting with a 1 and all other tickets with a 0 is very important, since we are *classifying* the outcomes into two categories, and counting the instances of one of them (in this case, the coin landing heads).
</details>

:::{.callout-warning icon=false}

## Ask yourself
What box would we use if the coin is not a fair coin, but lands heads $5$ out of $6$   times?

:::

**Tossing a fair coin twice**

<details><summary>Check your answer</summary>
We could use the same box as above:

![](images/coin.jpeg){width="100"}

Remember that the ticket $\fbox{1}$ represents the outcome of a toss landing heads and  $\fbox{0}$ represents a toss landing tails (because we are counting the number of heads). We let the box be as above, and draw two tickets at random *with replacement* from this box. To count the number of heads in two tosses, we add the draws.
</details>

**Tossing an unfair coin**

Set up the box model for tossing a coin which has chance of 5/6 landing heads, and counting the number of heads.

<details><summary>Check your answer</summary>

We do the same trick, of representing the outcome of heads with $\fbox{1}$, and tails with $\fbox{0}$. Since the coin lands heads 5 times out of 6, the box is given by:

![](images/unfair-coin.jpeg){fig-align=center width="500"}

We draw as many times as the number of tosses, and sum up the values on the tickets drawn.
</details>

##### Example 2: Rolling a fair die and summing the spots
![](images/dice.png){width="100"}[^unsplash]

**Rolling a fair die once** 

<details><summary>Check your answer</summary>
The box will have six tickets as shown below, and we would draw one ticket from this box. The chance of any one of the tickets is $1/6$.

![](images/die.jpeg){width="200"}
</details>

**Rolling a fair die twice**

<details><summary>Check your answer</summary>
We would use the same box as in the previous example, draw *twice* at random with replacement from this box, then add the draws.

![](images/two-dice.jpeg){width="450"}

</details>

##### Example 3: Betting on red in roulette 

![](images/roulette-us.jpg){fig-align="center" width="200"}[^unsplash]

<details><summary> Expand to read this example</summary>
An American roulette wheel has 38 pockets, of which 18 are red, 18 black, and 2 are green. The wheel is spun, and a small ball is thrown on the wheel so that it is equally likely to land in any of the 38 pockets. Players bet on which colored or numbered pocket the ball will come to rest in. If you bet one dollar that the ball will land on red, and it does, you get your dollar back, and you win one more dollar, so your *net gain* is \$1. If it doesn't, and lands on a black or green number, you lose your dollar, and your *net "gain"* is -\$1. What would be the box model for your net gain from a single spin? 

**Net gain from a single spin**

<details><summary>Check your answer</summary>
We would use the box shown below marked "Gain". In the top box, there are 38 tickets, each representing a numbered pocket on the wheel. Draw one ticket to represent the ball landing in a particular pocket. In the second row each ticket represents a colored pocket, and we see that there are 18 red pockets, 18 black, and 2 green. We only care about the outcome *ball lands in red pocket*, and our gain from this. We would draw once from it, with the ticket marked $\fbox{+1}$ representing our gain if the ball lands on a red pocket, and the ticket $\fbox{-1}$ representing our loss if the ball doesn't land on red. We can see that the chance of drawing a  $\fbox{+1}$ is 18 out of 38.

![](images/roulette-bet.jpeg){fig-align="center" width="300"}

</details>

**Net gain from 10 spins**

How would we model our *net gain* or winnings from 10 spins (we bet \$1 on each spin, and either lose it or get it back plus \$1)?

<details><summary>Check your answer</summary>
Use the same box as above, with 18 tickets marked $\fbox{+1}$ and 20 marked $\fbox{-1}$, draw 10 times at random with replacement, and sum the draws.  
</details>

</details>

##### Example 4: Donkeys in Kenya
![](images/kenyan-donkey.jpeg){fig-align=center width="200"}[^donkey-pic]

<details><summary> Expand to read this example</summary>
Donkeys play important roles in rural Kenya. People need donkeys for moving crops and water, for personal transportation, and for plowing fields. When a donkey gets sick, the vet needs to figure out how much the donkey weighs in order to prescribe the right amount of medicine. But, many vets in rural Kenya don’t have a scale big enough to weigh a donkey. Too little medicine can cause a sickness to re-emerge, and too much medicine can cause a harmful overdose. There are over 1.8 million donkeys in Kenya, so it’s important to have a simple, accurate way to estimate the weight of a donkey. The question is: how can we accurately estimate the weight of a donkey using other easy to get measurements?  To address this question, The UK Donkey Sanctuary carried out a study at 17 mobile de-worming sites in rural Kenya. All 544 donkeys brought to these sites between July 23 and August 11, 2010, that were not pregnant or visibly diseased, were entered into the study.[^donkey].

Four body measurements were made for each donkey: liveweight (kg), heart girth (cm), height (cm), and length (cm), and in addition, sex and body condition score were recorded (the body condition score categorized the donkeys according to their condition, ranging from "emaciated" to "obese"). Suppose I want to sample 50 donkeys from this dataset, to compute their average weight and average girth (girth or heart girth  is the circumference of the body, measured just behind the front legs.)

Set up the box model for this process (sampling donkeys).

<details><summary>Check your answer</summary>

The box has 544 tickets, one for each donkey. The ticket has information from all 8 variables recorded (3 categorical and 5 numerical). We only need 2 variables, so the tickets will have those two variables recorded.
We draw 50 tickets from this box at random *without* replacement, and compute 2 averages from the draws.

![](images/donkey-tkt.jpeg){fig-align=center width="300"}


</details>

[^donkey]: K. Milner and J.C. Rougier, 2014. *How to weigh a donkey in the
Kenyan countryside*. Significance, 11(4), 40–43. 74, 115
<https://rss.onlinelibrary.wiley.com/doi/full/10.1111/j.1740-9713.2014.00768.x>

[^donkey-pic]: <https://people.maths.bris.ac.uk/~mazjcr/#donkeys>

</details>

##### Example 5: Penguins!

![](images/penguins.png){fig-align=center width="300"}

<details><summary> Expand to read this example</summary>

You have seen the penguins data, which measured `r ncol(penguins)` variables on a sample of `r nrow(penguins)`. Here the box will contain 344 tickets, and we will draw 50 tickets at random without replacement. Note that each ticket in the box represents one penguin in the sample, and has information for multiple variables measured on that penguin. We would consider only the information we are interested in. Suppose we wanted sex, species, and flipper length, to compare the flipper lengths of males and females, grouped by species.
Set up the box model.

<details><summary>Check your answer</summary>

The box would have 344 tickets, one for each penguin. Each ticket would have 3 things written on it: the species, sex, and flipper length in mm of the penguin.
We would draw 50 tickets at random without replacement, and 
![](images/penguin-ticket.jpeg){fig-align=center width="300"}

</details>

## Simulating the box model

:::{.callout-tip}

## Code along

As you read through these notes, keep RStudio open in another window to code along at the console.
:::

Let's simulate rolling a die and counting how many times we see each face. 

If we roll it 6 times, we don't really expect to see each face once, and as you can see below, in this particular instance of rolling the die six times, we didn't see the face with one spot, but saw two spots twice. 
```{r}
set.seed(12345)
die <- 1:6

die_rolls <- sample(die, 6, replace = TRUE)

data.frame(die_rolls) %>%
  group_by(die_rolls) %>% 
  summarise(n = n())
```


What about if we roll the die 60 times? We should see each face about ten times:

```{r}
set.seed(12345)

die_rolls <- sample(die, 60, replace = TRUE)

data.frame(die_rolls) %>%
  group_by(die_rolls) %>% 
  summarise(n = n())
```

Not so great, but recalling the fair coin, let's roll the die 600 times:
```{r}
set.seed(12345)

die_rolls <- sample(die, 600, replace = TRUE)

data.frame(die_rolls) %>%
  group_by(die_rolls) %>% 
  summarise(n = n())
```

It might be better to visualize it. We will draw the *probability histogram*, which shows the probabilities of each possible outcome (the probability distribution), and compare it to the *empirical* histograms (plotting the data distribution, *not* the probability distribution) of the results of rolling the die $6, 60$, and $600$ times. Note that the probability histogram is a *theoretical* histogram, where the area of the bars represent probabilities, and the total area of the histogram is $1$.


```{r}
prob_die <- rep(1/6, 6)
set.seed(12345)

p1 <- data.frame(die) %>% 
  ggplot(aes(x = factor(die), y=prob_die)) +
  geom_col(width = 0.98, fill = "goldenrod2") +
  xlab("number of spots") +
  ylab("probability") +
  ggtitle("Probability distribution of the \n outcome of a die roll") +
  lims(y = c(0, .35))

roll_6 <- sample(die, 6, replace = TRUE)
roll_6 <- data.frame(table(roll_6)) %>%
  add_row(roll_6 = factor(1), Freq = 0, .before = 1) %>%
  mutate(spots = factor(1:6),
         prop_rolls = Freq/6)
# adding in a new row at the top that lists the number of times
# 1 was rolled in 6 rolls
# then adding in the values for the x-axis

p2 <- roll_6 %>%
  ggplot(aes(x = spots, y= prop_rolls)) +
  geom_col(width = 0.98, fill = "blue") +
  xlab("number of spots") +
  ylab("proportion of rolls") +
  ggtitle("Empirical distribution for 6 rolls") +
  lims(y = c(0, .35))


roll_60 <- sample(die, 60, replace = TRUE)

roll_60 <- data.frame(table(roll_60)) %>%
    mutate(spots = factor(1:6),
         prop_rolls = Freq/60)

p3 <- roll_60 %>%
  ggplot(aes(x = spots, y= prop_rolls)) +
  geom_col(width = 0.98, fill = "blue") +
  xlab("number of spots") +
  ylab("proportion of rolls") +
  ggtitle("Empirical distribution for 60 rolls") +
  lims(y = c(0, .35))
  

roll_600 <- sample(die, 600, replace = TRUE)

roll_600 <- data.frame(table(roll_600)) %>%
    mutate(spots = factor(1:6),
         prop_rolls = Freq/600)


p4 <- data.frame(roll_600) %>%
  ggplot(aes(x = spots, y=prop_rolls)) +
  geom_col(width = 0.98, fill = "blue") +
  xlab("number of spots") +
  ylab("proportion of rolls") +
  ggtitle("Empirical distribution for 600 rolls") +
  lims(y = c(0, .35))

(p1 + p2)/(p3+p4)
```

The important takeaway here is that we have a *theoretical* probability distribution of the outcomes, and we have what actually happens when we perform the experiment over and over. Eventually, the empirical distribution begins to look like the theoretical distribution. 


The box model is easily simulated in R, since there is a convenient function that does exactly what we need: draw tickets from a "box" (a vector). We will use the function `sample(x, size = n, replace = FALSE)`, where `x` is the vector you want to sample from, `size` is the number of draws (with the default value being the length of `x`), and `replace` specifies whether the draws are with or without replacement. The default in `sample()` is to draw _without_ replacement. (Note: The `set.seed()` function below ensures that we will get the same random sample each time we run the code.)[^setseed]

[^setseed]: The random number generator in R is called a "Pseudo Random Number Generator", because the process can be controlled by a "seed". These are algorithmic random number generators, which means that if you provide the same seed (a starting number), R will generate the same sequence of random numbers. This makes it easier to debug your code, and reproduce your results if needed.


```{r}
#| code-fold: false
set.seed(12345)
box <- c(1, 2, 2, 3, 4)
sample(box,1)
```

We can use `sample()` to *estimate* the chance of a particular outcome  when we aren't sure of what that chance might be. We would do this by repeatedly sampling from the "box" with replacement (many times), then computing the proportion of times we drew each ticket. For example, say we consider our first example (the simple box), and want to estimate the chance of each ticket.

In the code below, another new function is introduced: `replicate()`. The function `replicate(reps, expr)` is a very useful function that takes as input an expression `expr` and evaluates it `reps` times, returning a vector. 

```{r}
#| code-fold: false
#| fig-width: 4
#| fig-height: 3
#| fig-align: center

box <- c(1, 2, 2, 3, 4)
draws <- replicate(2000, sample(box, 1, replace = TRUE))
ggplot(data.frame(draws), aes(x=draws)) + 
  geom_bar(aes(y=..prop..), fill="blue", width = 0.98) + 
  ylab("proportion of draws") + 
  xlab("ticket drawn")
```

We see that the *estimated* chance of drawing a $\fbox{2}$ is about 0.4, and this is about twice the estimated chance of drawing any other ticket. Of course, we knew this already, without needing to code it in R. Let's think of a more complicated situation: 

What if we wanted to wanted to draw _five_ tickets with replacement from this box, and sum the draws? What would be the possible values that we would get? What could their chances be? We can visualize this in R:

```{r}
#| code-fold: false
#| fig-width: 4
#| fig-height: 3
#| fig-align: center

box <- c(1, 2, 2, 3, 4)
draws <- replicate(5000, sum(sample(box, size = 5, replace = TRUE)))
ggplot(data.frame(draws), aes(x=draws)) + 
  geom_bar(aes(y=..prop..), fill="blue", width = 0.98) + 
  ylab("proportion") + 
  xlab("sum of draws") + 
  scale_x_continuous(breaks = seq(min(draws), max(draws), by = 1))
```

We can see that there is a lot more variation in the values taken by the sum of 5 draws.


#### Tossing a fair coin

We can estimate the chances of various outcomes related to coin tossing, using sampling from a box. 

Suppose, for example, that we would like to figure out the chance of exactly 2 heads if we toss a coin 4 times. Think about how you would use the functions `sample()` and `replicate()` to model this, using the 0-1 box we defined earlier, for tossing a coin.

```{r}

coin <- c(0, 1) #1 represents the toss landing heads
two_heads <-replicate(50000, sum(sample(coin, 4, replace = TRUE)) == 2)
cat("The proportion of times we see 2 heads out of 4 tosses is", mean(two_heads))

```


#### Rolling a pair of dice and summing the spots

This is something that we could use if we wanted to play Monopoly and couldn't find the dice. Recall the box we used to simulate a die roll. Now we are going to define a vector in R to represent a die, and sample twice with replacement, from this vector, and add the spots.


```{r}
die <- 1:6
# to simulate rolling a die twice and summing the spots
draws <- sample(die, size = 2, replace = TRUE)
sum(draws)

```

We could also repeat it many times and estimate the chance of each of the possible outcomes.

```{r}
#| fig-width: 4
#| fig-height: 3
#| fig-align: center

many_draws <- replicate(5000, sum(sample(die, size = 2, replace = TRUE)))
ggplot(data.frame(many_draws), aes(x=many_draws)) + 
  geom_bar(aes(y=..prop..), fill="blue", width = 0.98) + 
  ylab("proportion") + 
  xlab("sum of two draws") + 
  scale_x_continuous(breaks = seq(min(many_draws), 
                                  max(many_draws), by = 1))

```


:::{.callout-warning icon=false}

## Ask yourself

We know all the possible outcomes of summing a pair of dice (between $2$ and $12$ spots). Why not make a box with tickets labeled $2, 3, 4, \ldots, 12$ and draw *once* from that box? If we did indeed want a box from which we would only draw once, what would the box be? (Hint: How many possible outcomes would there be if you rolled a pair of dice. )
:::


#### Sampling donkeys

In the donkeys dataset, the box has 544 tickets, with each ticket representing one of the donkeys that was measured at the mobile de-worming sites. Each ticket contains the values of 8 variables, of which we are interested in 2. We set up the box model for drawing 50 tickets at random without replacement, and we wanted to compute the average girth and the average weight.

We will use a function called `slice_sample`. The function `slice` was introduced in the notes on conditioning, and `slice_sample` is similar, except that it selects a random sample from the rows of a data frame. We will compute the average girth and the average weight for the donkeys in this sample. 

```{r}
#| code-fold: false

# read in the donkey data
donkeys <- read.csv('donkeys.csv')

# take a quick look at the dataset
glimpse(donkeys)

# draw a sample of 50 donkeys and compute their mean girth and weight
donkeys %>%
  select(Girth, Weight) %>% #changing tickets to include variables of interest
  slice_sample(n = 50) %>% #drawing 50 times without replacement
  summarise(average_girth_cm = mean(Girth), average_weight_kg = mean(Weight))
```




#### Sampling penguins

Recall that in the penguins example, when the box has 344 tickets, with each ticket representing one of the observations that we have access to from the Palmer penguins data, each ticket contains the values of multiple variables. We set up the box model for sampling 50 penguins without replacement, and we wanted to compare flipper lengths.


```{r}
#| code-fold: false

# one sample
drop_na(penguins,sex) %>%
  select(species, sex, flipper_length_mm) %>% #changing tickets
  slice_sample(n = 50) %>% #drawing 50 times without replacement
  group_by(species, sex) %>%
  summarise(mean_flipper_length_mm = mean(flipper_length_mm))
```

### Drawing with replacement and without replacement
#### What's the difference? 

Consider our first box again, the one with five tickets. 
When we draw at random *with* replacement, we draw one ticket, and put it back before drawing another ticket. For the box in this section, if we draw twice with replacement, both times we will draw from the following box:

![](images/box.jpeg){fig-align=center width="200"}

If we draw twice at random *without* replacement, then our second draw is from a *different* box, with an example illustrated below:

![](images/no-replace-box.jpeg){fig-align=center width="300"}

In the next set of notes, we are going to use R to simulate what happens when we draw twice from this box, once with replacement, and once without. We are also going to talk about the vocabulary of sampling.


## Summary

- In this lecture, we introduced the ideas of probability via the frequentist theory of probability. We used this to justify the notion of equally likely outcomes, and defined the outcome space of an experiment. 
- Then, using equally likely outcomes, we defined the probability of an event as the ratio of the number of outcomes in the event to the number of total outcomes in the outcome space. 

- After defining the probability of an event, we wrote down the mathematical rules of probability and introduced Venn diagrams.

- The box model was introduced as a way to represent a process in which we *repeat* an experiment, recording the outcomes each time. Because the experiments have an element of chance (such as a coin toss), we call them chance processes. Later, we will look at statistics computed from the samples and use the box model to understand the variability of the statistics. Box models are helpful to help us understand chance processes, and to generalize from samples that have been collected using methods that use probability, to the populations that the samples were drawn from. We saw that the draws from a box give us a *representative* sample of the tickets in the box. 

- Finally, we simulated drawing from the box and computing summary statistics in R. 

 [^freq]: This is known as the *frequentist* theory of probability: the chance of something is the relative frequency with which it occurs in repeated trials (that are assumed to be independent).

[^fppbox]: The box model was introduced by Freedman, Pisani, and
Purves in their textbook

[*Statistics*](https://wwnorton.com/books/9780393929720)

[^uar]: We call the tickets equally likely when each ticket has the same chance of being drawn. That is, if there are $n$ tickets in the box, each has a chance of $1/n$ to be drawn. We also refer to this as drawing a ticket *uniformly at random*, because the chance of drawing the tickets are the same, or *uniform*.

[^unsplash]: Photo via unsplash.com


{{< include images/tmp/_date-meta.md >}}

{{< include ../../assets/includes/_links-to-materials.qmd >}}


## The Ideas in Code

You can run the simulations yourself using the code below. Copy and paste it into RStudio and play around with it.

First, lets define two vectors called **die** and **pair_of_dice** that represent the outcome spaces of rolling a die once and rolling a pair of dice once, respectively. 

```{r}
#| code-fold: false

die <- 1:6

die

pair_dice <- c( 2, 3, 3, rep(4,3), rep(5,4), rep(6, 5), rep(7,6), 
                rep(8,5), rep(9,4), rep(10,3), rep(11,2), 12)

pair_dice

```


We used a new function here called $\texttt{rep(x, n)}$. This function has two arguments, the first $\texttt{x}$ is a vector of any type, and the second $\texttt{n}$ is an integer. It returns an object creates a vector of the same type as $\texttt{x}$ by repeating $\texttt{x}$ $\texttt{n}$ times. For example $\texttt{rep(2,5)}$ gives `r rep(2,5)`, $\texttt{rep(2:4,5)}$ gives `r rep(2:4,5)`.

Now let's set up the first game, and repeat it 1000 times. You can change the number of simulations below. The first line has another new function called $\texttt{set.seed()}$. We write this with an integer argument that can be any integer you like, this integer is called the *seed*. Using this function ensures that any time you are using a random number generator (which you do when you sample at random), you will be able to reproduce your results as long as you use the same seed.

```{r}
#| code-fold: false

##### de mere first game ############

set.seed(123123) # This ensures that each time we run this code, we will get the same results.

num_simulations <- 1000 # specifying the number of simulations, or the number of times we will play

# now we will play the game of rolling the die 4 times num_simulations times
die_4 <- replicate(num_simulations, sample(die, 4, replace = TRUE)) 

# the results of play are saved as a numerical array (a matrix), not a data frame
# so we save it as a data frame, and transpose the rows and columns so each row is the 
# result of one game
die_4_df <- data.frame(t(die_4))

# the next two lines of code are to make our data frame look better
# and you can ignore them

colnames(die_4_df) <- paste("roll", sep = " ", 1:4) 

rownames(die_4_df) <- paste("simulation", sep = " ", 1:num_simulations)

# let's take a look at our data frame
head(die_4_df)


# we will create a new column that checks, for each play (each row), if there is at least 
# one 6. What will be the values in this column? Break the pipe and check!
# Finally, we will compute the proportion of plays in which at least one 6 was rolled.
die_4_df %>% 
  mutate(at_least_one_six = if_any(everything(), ~ . == 6)) %>%
  summarise(prop_wins = mean(at_least_one_six))
```

Let's repeat the simulation for the second game, in which we roll a pair of dice 24 times and record a win if at least one double six is rolled. 

Note that the number of simulations is defined above.

```{r}
#| code-fold: false

set.seed(123123)

######## de mere second game  ############

# define the outcome space from rolling a pair of dice listing all the outcomes, repeated
# the number of ways that can occur. For example we can get 3 by rolling a 2, 1 or a 1, 2
# note that we can get 12 in exactly 1 way, by rolling a double six.


pair_dice <- c( 2, 3, 3, rep(4,3), rep(5,4), rep(6, 5), rep(7,6), 
                rep(8,5), rep(9,4), rep(10,3), rep(11,2), 12)

## note, not ideal because if see 7 don't know how we got it

# play the game on repeat
dice_24 <- replicate(num_simulations, sample(pair_dice, 24, replace = TRUE) )

# make a data frame
dice_24_df <-  data.frame(t(dice_24)) 

# make the data frame easier to read
colnames(dice_24_df) <- paste("roll", sep = " ", 1:24)
rownames(dice_24_df) <- paste("simulation", sep = " ", 1:num_simulations)


#head(dice_24_df)

dice_24_df %>% 
  mutate(at_least_one_boxcars = if_any(everything(), ~ . == 12)) %>%
  summarise(prop_wins_game_2 = mean(at_least_one_boxcars))
```


