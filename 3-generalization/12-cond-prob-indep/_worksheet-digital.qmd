---
title: "PS 3.3b: Simulations"
---



```{r}
#| message: false
#| echo: false
#| warning: false

library(tidyverse)
library(patchwork)
```

In the following questions, use the chunks and uncomment the code by removing the # sign.

#### Question 1 Simulating the probabilities in de Méré's paradox, for 4 rolls of a die

- First we will create a box that represents a die, and remember - the only outcome you are interested in is rolling a 6, so let's call it die6. Why does the box have 5 zeroes and 1 one?

```{r}
# die6 <- c(0,0,0,0,0,1)
```

- Now we want to sample from this box 4 times, to simulate rolling a die 4 times, and then count the number of sixes in these 4 rolls. Since the draws are 0's and 1's, if we sum the draws, that counts how many sixes we rolled. 

```{r}
# sum(sample(die6, size = 4, replace = TRUE))
```

- In the next code chunk, we will use the function `replicate()` to repeat the process of simulating 4 die rolls 100 times. 
- Each time we roll the die 4 times (using `sample()`, we will use `sum()` to counting the number of sixes in the four draws. So we are simulating rolling a die 4 times and counting the number of sixes, over and over, 100 times. 
- After we run the chunk below, we will have a vector `game1_100` that has 100 entries, each of which represents the number of sixes in 4 rolls.

```{r}
# game1_100 <- replicate(100, 
#                  sum(sample(die6, size = 4, replace = TRUE)))
```

- We have created a vector with the result of 100 simulations of the game. 
- Now we want to see how the proportion of wins behaves as the number of simulations increases. - - In the next chunk, we will use `data.frame()` to create a data frame from our vector `game1_100` and add two columns, one that gives the simulation number (a sequence of the numbers from 1 to 100), and another that records if that instance of the game was a win: was the number of sixes at least 1, that is, greater than 0?
- Once we have done that, we create another column that records the *cumulative* proportion of wins (number of wins up to that point divided by the number of simulations up to that point).
- We have provided the code below to help you do this, and then created a line graph with the number of simulations along the x-axis and the proportion of wins so far along the y-axis. 
- Note that the function `cumsum()` computes the cumulative sum of a vector. For example, if `x = c(1, 2, 4, 7)`, then `cumsum(x)` will give `1 3 7 14`.  

```{r}
# data.frame(game1_100) %>% 
# mutate(sim_num = seq(from = 1, to = 100, by = 1),
#       win = game1_100 > 0,
#       prop_win = cumsum(win)/sim_num) %>%
#       ggplot(aes(x = sim_num, y = prop_win)) +
#        geom_line() + 
#        annotate("segment", x = 0, xend = 100, 
#                  y = 0.5, yend = 0.5, lty = 2, color ="red") +
#        annotate("text", x = -1, y = 0.5, label = "0.5", color = "red") + 
#        ggtitle("Game 1 with 100 simulations") +
#        xlab("number of simulations of the game") +
#        ylab("proportion of wins")
```


- What does the plot look like? Is the proportion of wins more or less than 0.5?
- Now it's your turn. Repeat this process, but with 1,000 and 10,000 simulations, and compare the plots. What do you see? How does this compare with the probability you computed in PS 3.3a?

#### Question 2 Simulating the probabilities in de Méré's paradox, for 24 rolls of a pair of dice.

Repeat the entire process above to estimate the probability of at least 1 pair of sixes in 24 rolls of a pair of dice. What do you see when you compare the plots? If you could travel back to the mid-seventeenth century, what advice would you give Chevalier de Méré?